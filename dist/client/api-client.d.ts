import { Config } from '../types/index.js';
export declare class SunEcommerceApiClient {
    private client;
    private config;
    constructor(config: Config);
    private setupInterceptors;
    private request;
    createProduct(data: any): Promise<any>;
    getProduct(id: string, params?: any): Promise<any>;
    searchProducts(params: any): Promise<any>;
    updateProduct(id: string, data: any): Promise<any>;
    deleteProduct(id: string): Promise<any>;
    createCategory(data: any): Promise<any>;
    getCategory(id: string): Promise<any>;
    listCategories(params?: any): Promise<any>;
    getCategoryTree(): Promise<any>;
    updateCategory(id: string, data: any): Promise<any>;
    deleteCategory(id: string): Promise<any>;
    getProductByHandle(handle: string): Promise<any>;
    createPricingRule(data: any): Promise<any>;
    getPricingRule(id: string): Promise<any>;
    listPricingRules(params?: any): Promise<any>;
    applyPricingRules(data: any): Promise<any>;
    validatePricingRule(data: any): Promise<any>;
    updatePricingRule(id: string, data: any): Promise<any>;
    deletePricingRule(id: string): Promise<any>;
    getPricingRuleByName(name: string): Promise<any>;
    updatePricingRuleStatus(id: string, isActive: boolean): Promise<any>;
    getActivePricingRules(params?: any): Promise<any>;
    bulkCalculatePrice(data: any): Promise<any>;
    getPricingRulesByPriority(priority: number): Promise<any>;
    bulkUpdatePricingRuleStatus(ruleIds: string[], isActive: boolean): Promise<any>;
    getPricingRuleStats(id: string): Promise<any>;
    duplicatePricingRule(id: string, newName: string): Promise<any>;
    createCart(data: any): Promise<any>;
    getCart(id: string): Promise<any>;
    addCartItem(cartId: string, data: any): Promise<any>;
    updateCartItem(cartId: string, itemId: string, data: any): Promise<any>;
    removeCartItem(cartId: string, itemId: string): Promise<any>;
    getCartSummary(cartId: string): Promise<any>;
    getCartItems(cartId: string, params?: any): Promise<any>;
    clearCart(cartId: string): Promise<any>;
    createInventory(data: any): Promise<any>;
    getInventoryByProduct(productId: string): Promise<any>;
    checkInventoryAvailability(data: any): Promise<any>;
    reserveInventory(data: any): Promise<any>;
    getInventory(id: string): Promise<any>;
    listInventory(params?: any): Promise<any>;
    updateInventory(id: string, data: any): Promise<any>;
    uploadMedia(data: any): Promise<any>;
    getMedia(id: string): Promise<any>;
    listMedia(params?: any): Promise<any>;
    updateMedia(id: string, data: any): Promise<any>;
    deleteMedia(id: string): Promise<any>;
    createPartner(data: any): Promise<any>;
    getPartner(id: string): Promise<any>;
    listPartners(params?: any): Promise<any>;
    createSalesChannel(data: any): Promise<any>;
    getSalesChannel(id: string): Promise<any>;
    getSalesChannelByCode(code: string): Promise<any>;
    listSalesChannels(params?: any): Promise<any>;
    updateSalesChannel(id: string, data: any): Promise<any>;
    deleteSalesChannel(id: string): Promise<any>;
    activateSalesChannel(id: string): Promise<any>;
    deactivateSalesChannel(id: string): Promise<any>;
    getSalesChannelStatistics(id: string): Promise<any>;
    createTranslation(data: any): Promise<any>;
    getTranslation(entityId: string, languageCode: string): Promise<any>;
    getSupportedLanguages(): Promise<any>;
    createProductTranslation(data: any): Promise<any>;
    getProductTranslation(productId: string, language: string): Promise<any>;
    updateProductTranslation(productId: string, language: string, data: any): Promise<any>;
    deleteProductTranslation(productId: string, language: string): Promise<any>;
    listProductTranslations(productId: string): Promise<any>;
    createCategoryTranslation(data: any): Promise<any>;
    getCategoryTranslation(categoryId: string, language: string): Promise<any>;
    updateCategoryTranslation(categoryId: string, language: string, data: any): Promise<any>;
    deleteCategoryTranslation(categoryId: string, language: string): Promise<any>;
    listCategoryTranslations(categoryId: string): Promise<any>;
    createProductAttributeTranslation(data: any): Promise<any>;
    getProductAttributeTranslation(attributeId: string, language: string): Promise<any>;
    updateProductAttributeTranslation(attributeId: string, language: string, data: any): Promise<any>;
    deleteProductAttributeTranslation(attributeId: string, language: string): Promise<any>;
    listProductAttributeTranslations(attributeId: string): Promise<any>;
    createProductVariantTranslation(data: any): Promise<any>;
    getProductVariantTranslation(variantId: string, language: string): Promise<any>;
    updateProductVariantTranslation(variantId: string, language: string, data: any): Promise<any>;
    deleteProductVariantTranslation(variantId: string, language: string): Promise<any>;
    listProductVariantTranslations(variantId: string): Promise<any>;
    bulkCreateTranslations(translations: any[]): Promise<any>;
    bulkDeleteTranslations(translations: any[]): Promise<any>;
    getTranslationStats(params?: any): Promise<any>;
    createAttribute(data: any): Promise<any>;
    getAttribute(id: string): Promise<any>;
    listAttributes(params?: any): Promise<any>;
    createAttributeValue(attributeId: string, data: any): Promise<any>;
    getAttributeValues(attributeId: string): Promise<any>;
    getAttributeByName(name: string): Promise<any>;
    updateAttribute(id: string, data: any): Promise<any>;
    deleteAttribute(id: string): Promise<any>;
    updateAttributeValue(attributeId: string, valueId: string, data: any): Promise<any>;
    deleteAttributeValue(attributeId: string, valueId: string): Promise<any>;
    bulkCreateAttributeValues(attributeId: string, values: any[]): Promise<any>;
    getAttributeUsage(id: string): Promise<any>;
    healthCheck(): Promise<any>;
    getSystemInfo(): Promise<any>;
}
//# sourceMappingURL=api-client.d.ts.map